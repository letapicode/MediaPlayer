name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      SKIP_OFFLINE_TESTS: 'true'
    steps:
      # Checkout repository sources
      - uses: actions/checkout@v3

      # Reuse previous build artifacts when possible
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-cmake-
      # Install CMake
      - uses: actions/setup-cmake@v3

      # Configure the project and enable the test suite
      - name: Configure
        run: cmake -B build -S . -DBUILD_TESTS=ON

      # Build all targets including tests
      - name: Build
        run: cmake --build build --config Release

      # Execute the C++ test suite with CTest
      - name: Run C++ tests
        run: |
          cd build
          ctest --output-on-failure

      # Execute Python unit tests
      - name: Run Python tests
        run: python -m unittest discover -s tests -p '*_test.py'
      - name: Run iOS tests
        if: matrix.os == 'macos-latest'
        run: xcodebuild test -scheme MediaPlayer -destination 'platform=iOS Simulator,name=iPhone 14'
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ctest-logs-${{ matrix.os }}
          path: build/Testing

  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout sources for linting
      - uses: actions/checkout@v3

      # Cache build directory for clang-tidy
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-cmake-
      - uses: actions/setup-cmake@v3
      # Generate compile commands for clang-tidy
      - name: Configure
        run: cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      # Install formatting tools
      - name: Install clang tools
        run: sudo apt-get update && sudo apt-get install -y clang-tidy clang-format

      # Run clang-tidy static analysis
      - name: clang-tidy
        run: |
          find src -name '*.cpp' -o -name '*.h' | xargs clang-tidy --warnings-as-errors='*' -p build

      # Ensure code is formatted correctly
      - name: clang-format check
        run: |
          find src -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run --Werror
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Prettier check
        run: npx prettier --check "src/**/*.qml" "src/**/*.js"
